// -----------------------------------------
// Contains all application-wide Sass mixins.
// -----------------------------------------

// Native `url(..)` function wrapper
// @param {String} $base - base URL for the asset
// @param {String} $type - asset type folder (e.g. 'fonts/') 
// @param {String} $path - asset path 
// @return {URL}
@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}

// Returns URL to an image based on its path
// @param {String} $path - image path 
// @param {String} $base - [base URL] -- base URL
// @return {URL}
// @require $base-url
@function image($path, $base: $base-url) {
    @return url($base , 'images/', $path);
}

// Returns URL to an image based on its path
// @param {String} $path - image path 
// @param {String} $base - [base URL] -- base URL
// @return {URL}
// @require $base-url
@function font($path, $base: $base-url) {
    @return asset($base , 'fonts/', $path);
}

// Returns color from color palette. A very spicy function allows us to get a color and pass in a second arg
// Which defines its shade the $color-palettes map is defined in the variables file
// @param {String} $pallete - name of palette
// @param {String} $shade [x-light/light/base/dark/x-dark] -- shade of color
// @return {color}
// @require $base-url
@function palette($palette, $shade: 'base') {
    @return map-get(map-get($color-palettes , $palette), shade);
}

// Returns color from color palette. A very spicy function allows us to get a color and pass in a second arg
// Which defines whether we want background or color
// @param {String} $status-color the color you want
// @param {String} $whether you want its background color or its border color
// @return {color}
// @require $base-url
@function statusColor($status-color, $backgroundOrBorder: 'background') {
    @return map-get(map-get($status-colors, $status-color), $backgroundOrBorder);
}